import React, { useEffect, useState } from 'react';
import api from '../services/api';

interface Pedido {
  id: number;
  data: string;
  status: string;
}

interface ItemPedidoDTO {
  id: number;
  nomeProduto: string;
  quantidade: number;
  precoUnitario: number | string;
}

interface AcompanhamentoPedidoProps {
  usuarioId: number;
}

const AcompanhamentoPedido: React.FC<AcompanhamentoPedidoProps> = ({ usuarioId }) => {
  const [pedido, setPedido] = useState<Pedido | null>(null);
  const [itens, setItens] = useState<ItemPedidoDTO[]>([]);
  const [carregando, setCarregando] = useState(true);

  useEffect(() => {
    const fetchPedidoEItens = async () => {
      try {
        setCarregando(true);

        let pedidoData: Pedido;

        try {
          const pedidoRes = await api.get(`/pedidos/ultimo/${usuarioId}`);
          pedidoData = pedidoRes.data;
        } catch (err1: any) {
          if (err1?.response?.status === 404) {
            const pedidoRes2 = await api.get(`/api/pedidos/ultimo/${usuarioId}`);
            pedidoData = pedidoRes2.data;
          } else {
            throw err1;
          }
        }

        setPedido(pedidoData);

        try {
          const itensRes = await api.get<ItemPedidoDTO[]>(`/pedidos/${pedidoData.id}/itens`);
          setItens(itensRes.data || []);
        } catch (errI1: any) {
          if (errI1?.response?.status === 404) {
            const itensRes2 = await api.get<ItemPedidoDTO[]>(`/api/pedidos/${pedidoData.id}/itens`);
            setItens(itensRes2.data || []);
          } else {
            throw errI1;
          }
        }
      } catch (error) {
        console.error('Erro ao buscar pedido/itens:', error);
        setPedido(null);
        setItens([]);
      } finally {
        setCarregando(false);
      }
    };

    fetchPedidoEItens();
  }, [usuarioId]);

  if (carregando) return <p>Carregando pedido...</p>;
  if (!pedido) return <p>Nenhum pedido encontrado.</p>;

  return (
    <div style={{ padding: '1rem', border: '1px solid #ccc', borderRadius: 10 }}>
      <h2>ðŸ“¦ Status do Pedido</h2>
      <p><strong>Status:</strong> {pedido.status}</p>
      <p><strong>Data:</strong> {new Date(pedido.data).toLocaleString()}</p>

      <h3>ðŸ§¾ Itens do Pedido:</h3>
      <ul>
        {itens.map((item) => {
          const preco = typeof item.precoUnitario === 'string'
            ? parseFloat(item.precoUnitario)
            : item.precoUnitario;
          return (
            <li key={item.id}>
              {item.quantidade}Ã— {item.nomeProduto} â€” R$ {preco.toFixed(2)}
            </li>
          );
        })}
      </ul>
    </div>
  );
};

export default AcompanhamentoPedido;
// src/components/CadastroDono.tsx
import React, { useState } from 'react';
import api from '../services/api';
import { useNavigate } from 'react-router-dom';

const CadastroDono: React.FC = () => {
  const navigate = useNavigate();

  // Dono
  const [nome, setNome] = useState('');
  const [email, setEmail] = useState('');
  const [senha, setSenha] = useState('');
  const [telefone, setTelefone] = useState('');

  // Restaurante
  const [nomeRestaurante, setNomeRestaurante] = useState('');
  const [enderecoRestaurante, setEnderecoRestaurante] = useState('');
  const [telefoneRestaurante, setTelefoneRestaurante] = useState('');

  // UI
  const [erro, setErro] = useState<string | null>(null);
  const [sucesso, setSucesso] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setErro(null);
    setSucesso(null);

    // validaÃ§Ãµes simples
    if (!nomeRestaurante.trim() || !enderecoRestaurante.trim()) {
      setErro('Preencha Nome do Restaurante e EndereÃ§o.');
      return;
    }

    setLoading(true);
    try {
      const payload = {
        // Dono
        nome,
        email,
        senha,
        telefone,
        // Restaurante (tem que bater com o que vocÃª testou no Postman)
        nomeRestaurante,
        enderecoRestaurante,
        telefoneRestaurante,
      };

      const { data } = await api.post('/api/auth/donos/register', payload);
      setSucesso(typeof data === 'string' ? data : 'Dono e restaurante cadastrados com sucesso');

      // Redireciona pro login do dono depois de 1.5s
      setTimeout(() => navigate('/login-dono'), 1500);
    } catch (err: any) {
      console.error(err);
      const msg = err?.response?.data || 'Erro ao cadastrar';
      setErro(typeof msg === 'string' ? msg : JSON.stringify(msg));
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ maxWidth: 520, margin: '40px auto', padding: 24, border: '1px solid #eee', borderRadius: 8, background: '#fff' }}>
      <h2 style={{ marginTop: 0 }}>Cadastro de Dono + Restaurante</h2>

      {erro && <div style={{ marginBottom: 12, padding: 10, background: '#fdecea', color: '#b71c1c', borderRadius: 6 }}>{erro}</div>}
      {sucesso && <div style={{ marginBottom: 12, padding: 10, background: '#e8f5e9', color: '#2e7d32', borderRadius: 6 }}>{sucesso}</div>}

      <form onSubmit={handleSubmit} style={{ display: 'grid', gap: 12 }}>
        <fieldset style={{ border: '1px solid #eee', borderRadius: 8, padding: 12 }}>
          <legend style={{ padding: '0 6px' }}>Dados do Dono</legend>
          <input type="text" placeholder="Nome" value={nome} onChange={e => setNome(e.target.value)} required />
          <input type="email" placeholder="E-mail" value={email} onChange={e => setEmail(e.target.value)} required />
          <input type="password" placeholder="Senha" value={senha} onChange={e => setSenha(e.target.value)} required />
          <input type="tel" placeholder="Telefone (opcional)" value={telefone} onChange={e => setTelefone(e.target.value)} />
        </fieldset>

        <fieldset style={{ border: '1px solid #eee', borderRadius: 8, padding: 12 }}>
          <legend style={{ padding: '0 6px' }}>Dados do Restaurante</legend>
          <input
            type="text"
            placeholder="Nome do Restaurante"
            value={nomeRestaurante}
            onChange={e => setNomeRestaurante(e.target.value)}
            required
          />
          <input
            type="text"
            placeholder="EndereÃ§o do Restaurante"
            value={enderecoRestaurante}
            onChange={e => setEnderecoRestaurante(e.target.value)}
            required
          />
          <input
            type="tel"
            placeholder="Telefone do Restaurante (opcional)"
            value={telefoneRestaurante}
            onChange={e => setTelefoneRestaurante(e.target.value)}
          />
        </fieldset>

        <button
          type="submit"
          disabled={loading}
          style={{ padding: '10px 16px', border: 'none', borderRadius: 8, background: '#0d6efd', color: '#fff', cursor: 'pointer' }}
        >
          {loading ? 'Cadastrando...' : 'Cadastrar'}
        </button>
      </form>
    </div>
  );
};

export default CadastroDono;
import { useState } from 'react';
import axios from 'axios';

type Props = {
  onVoltar: () => void;
};

function CadastroUsuario({ onVoltar }: Props) {
  const [formData, setFormData] = useState({
    nome: '',
    email: '',
    senha: '',
    telefone: '',
    dataCadastro: new Date().toISOString().split('T')[0]
  });

  const [erros, setErros] = useState<Record<string, string>>({});
  const [mensagemSucesso, setMensagemSucesso] = useState('');

  const formatarTelefone = (valor: string): string => {
    const nums = valor.replace(/\D/g, '').slice(0, 11);
    if (nums.length === 0) return '';
    if (nums.length <= 2) return `(${nums}`;
    if (nums.length <= 6) return `(${nums.slice(0, 2)}) ${nums.slice(2)}`;
    if (nums.length <= 10) return `(${nums.slice(0, 2)}) ${nums.slice(2, 6)}-${nums.slice(6)}`;
    return `(${nums.slice(0, 2)}) ${nums.slice(2, 7)}-${nums.slice(7, 11)}`;
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;

    if (name === 'telefone') {
      setFormData(prev => ({ ...prev, [name]: formatarTelefone(value) }));
    } else {
      setFormData(prev => ({ ...prev, [name]: value }));
    }
  };

  const validarFormulario = (): boolean => {
    const novosErros: Record<string, string> = {};

    if (!formData.nome.trim()) novosErros.nome = 'Nome Ã© obrigatÃ³rio';
    if (!formData.email.includes('@')) novosErros.email = 'Email invÃ¡lido';
    if (formData.senha.length < 6) novosErros.senha = 'Senha deve ter 6+ caracteres';
    if (formData.telefone.replace(/\D/g, '').length < 11) {
      novosErros.telefone = 'Celular invÃ¡lido (11 dÃ­gitos com DDD)';
    }

    setErros(novosErros);
    return Object.keys(novosErros).length === 0;
  };

  const cadastrar = async (e: React.FormEvent) => {
    e.preventDefault();
    setMensagemSucesso('');
    setErros({});

    if (!validarFormulario()) return;

    try {
      const dadosParaEnviar = {
        nome: formData.nome,
        email: formData.email,
        senha: formData.senha,
        telefone: formData.telefone.replace(/\D/g, ''),
        dataCadastro: formData.dataCadastro
      };

      await axios.post('http://localhost:8086/api/auth/usuarios/register', dadosParaEnviar);

      setMensagemSucesso('UsuÃ¡rio cadastrado com sucesso!');
      setFormData({
        nome: '',
        email: '',
        senha: '',
        telefone: '',
        dataCadastro: new Date().toISOString().split('T')[0]
      });
    } catch (erro: any) {
      console.error('Erro no cadastro:', erro);
      const status = erro?.response?.status;
      if (status === 409) {
        setErros({ servidor: 'Este e-mail jÃ¡ estÃ¡ cadastrado.' });
      } else {
        setErros({ servidor: 'Erro ao cadastrar usuÃ¡rio. Tente novamente.' });
      }
    }
  };

  return (
    <div style={{
      maxWidth: '500px',
      margin: '20px auto',
      padding: '20px',
      border: '1px solid #ddd',
      borderRadius: '8px',
      backgroundColor: '#fff',
      boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
    }}>
      <h2 style={{ textAlign: 'center', marginTop: 0, color: '#333' }}>Cadastro de UsuÃ¡rio</h2>

      {mensagemSucesso && (
        <div style={{
          padding: '10px',
          backgroundColor: '#d4edda',
          color: '#155724',
          borderRadius: '4px',
          marginBottom: '20px',
          textAlign: 'center'
        }}>
          {mensagemSucesso}
        </div>
      )}

      {erros.servidor && (
        <div style={{
          padding: '10px',
          backgroundColor: '#f8d7da',
          color: '#721c24',
          borderRadius: '4px',
          marginBottom: '20px',
          textAlign: 'center'
        }}>
          {erros.servidor}
        </div>
      )}

      <form onSubmit={cadastrar} style={{ display: 'grid', gap: '15px' }}>
        <div>
          <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>Nome Completo *</label>
          <input
            type="text"
            name="nome"
            value={formData.nome}
            onChange={handleChange}
            placeholder="Digite seu nome completo"
            style={{
              width: '100%',
              padding: '10px',
              borderRadius: '4px',
              border: erros.nome ? '1px solid #dc3545' : '1px solid #ced4da',
              fontSize: '16px'
            }}
          />
          {erros.nome && <span style={{ color: '#dc3545', fontSize: '14px' }}>{erros.nome}</span>}
        </div>

        <div>
          <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>Email *</label>
          <input
            type="email"
            name="email"
            value={formData.email}
            onChange={handleChange}
            placeholder="seu@email.com"
            style={{
              width: '100%',
              padding: '10px',
              borderRadius: '4px',
              border: erros.email ? '1px solid #dc3545' : '1px solid #ced4da',
              fontSize: '16px'
            }}
          />
          {erros.email && <span style={{ color: '#dc3545', fontSize: '14px' }}>{erros.email}</span>}
        </div>

        <div>
          <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>Senha *</label>
          <input
            type="password"
            name="senha"
            value={formData.senha}
            onChange={handleChange}
            placeholder="MÃ­nimo 6 caracteres"
            style={{
              width: '100%',
              padding: '10px',
              borderRadius: '4px',
              border: erros.senha ? '1px solid #dc3545' : '1px solid #ced4da',
              fontSize: '16px'
            }}
          />
          {erros.senha && <span style={{ color: '#dc3545', fontSize: '14px' }}>{erros.senha}</span>}
        </div>

        <div>
          <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>Telefone *</label>
          <input
            type="text"
            name="telefone"
            value={formData.telefone}
            onChange={handleChange}
            placeholder="(99) 99999-9999"
            maxLength={15}
            style={{
              width: '100%',
              padding: '10px',
              borderRadius: '4px',
              border: erros.telefone ? '1px solid #dc3545' : '1px solid #ced4da',
              fontSize: '16px'
            }}
          />
          {erros.telefone && <span style={{ color: '#dc3545', fontSize: '14px' }}>{erros.telefone}</span>}
        </div>

        <input type="hidden" name="dataCadastro" value={formData.dataCadastro} />

        <div style={{ display: 'flex', justifyContent: 'space-between', marginTop: '20px' }}>
          <button
            type="button"
            onClick={onVoltar}
            style={{
              padding: '10px 20px',
              backgroundColor: '#6c757d',
              color: 'white',
              border: 'none',
              borderRadius: '4px',
              cursor: 'pointer',
              fontSize: '16px',
              fontWeight: 'bold'
            }}
          >
            Voltar
          </button>

          <button
            type="submit"
            style={{
              padding: '10px 20px',
              backgroundColor: '#28a745',
              color: 'white',
              border: 'none',
              borderRadius: '4px',
              cursor: 'pointer',
              fontSize: '16px',
              fontWeight: 'bold'
            }}
          >
            Cadastrar
          </button>
        </div>
      </form>
    </div>
  );
}

export default CadastroUsuario;
.cardapio-container {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
  font-family: 'Segoe UI', sans-serif;
}

.voltar-btn {
  background-color: #333;
  color: white;
  border: none;
  padding: 8px 14px;
  border-radius: 6px;
  font-weight: bold;
  cursor: pointer;
  margin-bottom: 16px;
}

.cardapio-container h2 {
  margin-bottom: 20px;
  color: #222;
}

.cardapio-list {
  list-style: none;
  padding: 0;
  margin: 0;
}

.cardapio-item {
  background: #fff;
  border: 1px solid #eee;
  padding: 16px;
  margin-bottom: 16px;
  border-radius: 10px;
  box-shadow: 0px 1px 5px rgba(0, 0, 0, 0.06);
}

.cardapio-item strong {
  font-size: 18px;
  display: block;
  margin-bottom: 6px;
  color: #222;
}

.cardapio-item em {
  font-size: 14px;
  color: #666;
  display: block;
  margin-bottom: 8px;
}

.cardapio-item span {
  display: block;
  font-weight: bold;
  margin-bottom: 8px;
  color: #111;
}

.adicionar-btn {
  background-color: #ff5e00;
  color: white;
  border: none;
  padding: 8px 12px;
  border-radius: 8px;
  font-weight: bold;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.adicionar-btn:hover {
  background-color: #e04e00;
}

.carrinho-section {
  margin-top: 32px;
  padding: 20px;
  border: 1px solid #eee;
  background-color: #fafafa;
  border-radius: 10px;
}

.carrinho-section h3 {
  margin-bottom: 12px;
}

.finalizar-pedido {
  margin-top: 16px;
}

.finalizar-pedido button {
  background-color: #00c853;
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 8px;
  font-weight: bold;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.finalizar-pedido button:hover {
  background-color: #00b34c;
}

.sucesso {
  color: green;
  margin-top: 10px;
}

.erro {
  color: red;
  margin-top: 10px;
}

.sucesso-visual {
  background-color: #d0f5dc;
  color: #256029;
  padding: 12px;
  border-radius: 8px;
  border: 1px solid #b2dfb5;
  font-weight: bold;
  margin-bottom: 20px;
}

.acompanhamento-container {
  border: 1px solid #ccc;
  background-color: #fefefe;
  padding: 20px;
  border-radius: 10px;
  margin-top: 20px;
}

.acompanhamento-container h2,
.acompanhamento-container h3 {
  margin-bottom: 10px;
}

.acompanhamento-container ul {
  list-style: none;
  padding-left: 0;
}
import React, { useEffect, useState } from 'react';
import api from '../services/api';
import './CardapioRestaurante.css';

interface Props {
  restauranteId: number;
  nomeRestaurante: string;
  onVoltar: () => void;
}

interface Produto {
  id: number;
  nome: string;
  descricao: string;
  preco: number;
}

interface PedidoRequest {
  usuarioId: number;
  restauranteId: number;
  itens: {
    produtoId: number;
    quantidade: number;
  }[];
}

const CardapioRestaurante: React.FC<Props> = ({ restauranteId, nomeRestaurante, onVoltar }) => {
  const [cardapio, setCardapio] = useState<Produto[]>([]);
  const [carrinho, setCarrinho] = useState<{ id: number; quantidade: number }[]>([]);
  const [erro, setErro] = useState<string | null>(null);
  const [mensagemSucesso, setMensagemSucesso] = useState<string | null>(null);

  useEffect(() => {
    const carregarCardapio = async () => {
      try {
        const response = await api.get(`/api/produtos/por-restaurante/${restauranteId}`);
        setCardapio(response.data);
        setErro(null);
      } catch (error) {
        console.error('Erro ao carregar cardÃ¡pio:', error);
        setErro('Erro ao carregar cardÃ¡pio. Verifique a conexÃ£o ou o ID do restaurante.');
      }
    };

    carregarCardapio();
  }, [restauranteId]);

  const adicionarAoCarrinho = (produtoId: number) => {
    setCarrinho((prev) => {
      const existente = prev.find((item) => item.id === produtoId);
      if (existente) {
        return prev.map((item) =>
          item.id === produtoId ? { ...item, quantidade: item.quantidade + 1 } : item
        );
      }
      return [...prev, { id: produtoId, quantidade: 1 }];
    });
  };

  const fazerPedido = async () => {
    const usuarioId = parseInt(localStorage.getItem('usuarioId') || '1');
    const pedido: PedidoRequest = {
      usuarioId,
      restauranteId,
      itens: carrinho.map((item) => ({
        produtoId: item.id,
        quantidade: item.quantidade,
      })),
    };

    try {
      await api.post('/pedidos', pedido);
      setCarrinho([]);
      setMensagemSucesso('âœ… Pedido realizado com sucesso!');
      setTimeout(() => setMensagemSucesso(null), 4000); // limpa apÃ³s 4s
    } catch (error) {
      console.error('Erro ao fazer pedido:', error);
      alert('Erro ao realizar pedido.');
    }
  };

  return (
    <div className="cardapio-container">
      <button className="voltar-btn" onClick={onVoltar}>â† Voltar</button>
      <h2 className="titulo-cardapio">CardÃ¡pio de {nomeRestaurante}</h2>

      {erro && <p className="erro-cardapio">{erro}</p>}
      {mensagemSucesso && <p className="mensagem-sucesso">{mensagemSucesso}</p>}

      <ul className="cardapio-list">
        {cardapio.map((produto) => (
          <li className="cardapio-item" key={produto.id}>
            <strong>{produto.nome}</strong>
            <em>{produto.descricao}</em>
            <span>R$ {produto.preco.toFixed(2)}</span>
            <button className="adicionar-btn" onClick={() => adicionarAoCarrinho(produto.id)}>Adicionar</button>
          </li>
        ))}
      </ul>

      {carrinho.length > 0 && (
        <div className="carrinho-section">
          <h3>Carrinho</h3>
          <ul>
            {carrinho.map((item) => {
              const produto = cardapio.find((p) => p.id === item.id);
              return (
                <li key={item.id}>
                  {produto?.nome} â€” {item.quantidade}x R$ {(produto?.preco || 0).toFixed(2)}
                </li>
              );
            })}
          </ul>
          <button className="finalizar-btn" onClick={fazerPedido}>Finalizar Pedido</button>
        </div>
      )}
    </div>
  );
};

export default CardapioRestaurante;
import React, { useState } from 'react';
import HistoricoPedidos from './HistoricoPedidos';

const DashboardCliente: React.FC = () => {
  const [mostrarHistorico, setMostrarHistorico] = useState(false);
  const usuarioId = 1; // âš ï¸ Fixo por enquanto

  return (
    <div style={{ padding: '2rem' }}>
      <h1>ðŸŽ¯ Ãrea do Cliente</h1>

      {!mostrarHistorico ? (
        <>
          <button onClick={() => setMostrarHistorico(true)}>
            Ver HistÃ³rico de Pedidos
          </button>
        </>
      ) : (
        <HistoricoPedidos
          usuarioId={usuarioId}
          onVoltar={() => setMostrarHistorico(false)}
        />
      )}
    </div>
  );
};

export default DashboardCliente;
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../services/api';

const DonoLogin: React.FC = () => {
  const navigate = useNavigate();
  const [email, setEmail] = useState('');
  const [senha, setSenha] = useState('');
  const [loading, setLoading] = useState(false);
  const [erro, setErro] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setErro(null);
    setLoading(true);

    try {
      // 1) Login do dono
      const loginRes = await api.post('/api/auth/donos/login', { email, senha });

      // 2) Usar o PRÃ“PRIO ID do dono como restauranteId (sem chamadas extras)
      const donoId = Number(loginRes.data?.id);
      if (!Number.isFinite(donoId) || donoId <= 0) {
        setErro('NÃ£o foi possÃ­vel identificar o usuÃ¡rio (ID invÃ¡lido).');
        return;
      }

      // 3) Redirecionar para o painel do restaurante (id == donoId)
      navigate(`/painel-restaurante/${donoId}`);
    } catch (err: any) {
      console.error(err);
      const status = err?.response?.status;
      const data = err?.response?.data;
      setErro(
        status
          ? `Erro ${status}: ${typeof data === 'string' ? data : JSON.stringify(data)}`
          : 'Falha no login. Verifique as credenciais.'
      );
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ maxWidth: 420, margin: '40px auto', padding: 24, border: '1px solid #eee', borderRadius: 8, background: '#fff' }}>
      <h2 style={{ marginTop: 0 }}>Login do Dono</h2>

      {erro && (
        <div style={{ marginBottom: 12, padding: 10, background: '#fdecea', color: '#b71c1c', borderRadius: 6 }}>
          {String(erro)}
        </div>
      )}

      <form onSubmit={handleSubmit} style={{ display: 'grid', gap: 12 }}>
        <div>
          <label style={{ display: 'block', marginBottom: 6 }}>E-mail</label>
          <input
            type="email"
            required
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            style={{ width: '100%', padding: 10, borderRadius: 6, border: '1px solid #ddd' }}
            placeholder="dono@exemplo.com"
          />
        </div>
        <div>
          <label style={{ display: 'block', marginBottom: 6 }}>Senha</label>
          <input
            type="password"
            required
            value={senha}
            onChange={(e) => setSenha(e.target.value)}
            style={{ width: '100%', padding: 10, borderRadius: 6, border: '1px solid #ddd' }}
            placeholder="â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢"
          />
        </div>
        <button
          type="submit"
          disabled={loading}
          style={{ padding: '10px 16px', border: 'none', borderRadius: 8, background: '#0d6efd', color: '#fff', cursor: 'pointer' }}
        >
          {loading ? 'Entrando...' : 'Entrar'}
        </button>
      </form>
    </div>
  );
};

export default DonoLogin;
import React, { useState } from 'react';
import api from '../services/api';

interface Produto {
  id: number;
  nome: string;
  preco: number;
  restauranteId: number;
}

interface ItemCarrinho {
  produto: Produto;
  quantidade: number;
}

interface FinalizarPedidoProps {
  carrinho: ItemCarrinho[];
  usuarioId: number;
  onFinalizado: () => void;
}

const FinalizarPedido: React.FC<FinalizarPedidoProps> = ({
  carrinho,
  usuarioId,
  onFinalizado
}) => {
  const [mensagem, setMensagem] = useState('');
  const [carregando, setCarregando] = useState(false);

  const finalizarPedido = async () => {
    if (carrinho.length === 0) {
      setMensagem('Seu carrinho estÃ¡ vazio!');
      return;
    }

    const restauranteId = carrinho[0].produto.restauranteId;
    const restauranteDiferente = carrinho.some(
      (i) => i.produto.restauranteId !== restauranteId
    );
    if (restauranteDiferente) {
      setMensagem('Todos os itens do pedido devem ser do mesmo restaurante.');
      return;
    }

    setCarregando(true);
    setMensagem('');

    const payload = {
      usuarioId,
      restauranteId,
      itens: carrinho.map((item) => ({
        produtoId: item.produto.id,
        quantidade: item.quantidade,
      })),
    };

    try {
      const res = await api.post('/pedidos', payload);
      setMensagem(`Pedido #${res.data.id} realizado com sucesso!`);
      onFinalizado();
    } catch (err: any) {
      const errorMsg =
        err?.response?.data?.message ||
        err?.response?.data ||
        err?.message ||
        'Erro ao finalizar pedido';
      setMensagem(errorMsg);
      console.error('âŒ Erro detalhado:', err.response || err);
    } finally {
      setCarregando(false);
    }
  };

  return (
    <div className="finalizar-pedido">
      <button onClick={finalizarPedido} disabled={carregando}>
        {carregando ? 'Processando...' : 'Finalizar Pedido'}
      </button>
      {mensagem && (
        <p className={mensagem.toLowerCase().includes('sucesso') ? 'sucesso' : 'erro'}>
          {mensagem}
        </p>
      )}
    </div>
  );
};

export default FinalizarPedido;
.historicoContainer {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
  font-family: 'Roboto', sans-serif;
  background-color: #f9f9f9;
  border-radius: 10px;
}

.header {
  display: flex;
  align-items: center;
  margin-bottom: 25px;
  padding-bottom: 15px;
  border-bottom: 2px solid #eee;
}

.btnVoltar {
  padding: 8px 16px;
  background: #6200ea;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
  transition: all 0.3s;
  margin-right: 20px;
}

.btnVoltar:hover {
  background: #3700b3;
  transform: translateY(-2px);
}

h2 {
  color: #333;
  font-size: 24px;
  margin: 0;
}

.pedidosGrid {
  display: grid;
  gap: 20px;
}

.pedidoCard {
  background: white;
  border-radius: 10px;
  padding: 20px;
  box-shadow: 0 4px 6px rgba(0,0,0,0.1);
  transition: transform 0.3s;
}

.pedidoCard:hover {
  transform: translateY(-5px);
  box-shadow: 0 6px 12px rgba(0,0,0,0.15);
}

.pedidoHeader {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 15px;
  padding-bottom: 10px;
  border-bottom: 1px solid #eee;
}

.pedidoHeader h3 {
  margin: 0;
  color: #222;
  font-size: 20px;
}

.pedidoHeader span {
  background: #f0f0f0;
  padding: 5px 10px;
  border-radius: 20px;
  font-size: 14px;
  font-weight: bold;
}

.pedidoInfo p {
  margin: 8px 0;
  font-size: 16px;
  display: flex;
}

.pedidoInfo strong {
  min-width: 100px;
  display: inline-block;
  color: #555;
}

.total {
  font-weight: bold;
  font-size: 18px;
  color: #2e7d32;
  margin-top: 15px;
  padding-top: 10px;
  border-top: 1px dashed #ddd;
}

.itensList {
  margin-top: 15px;
}

.itensList h4 {
  margin: 0 0 10px 0;
  font-size: 16px;
  color: #444;
}

.itensList ul {
  list-style: none;
  padding: 0;
  margin: 0;
}

.itensList li {
  padding: 8px 0;
  border-bottom: 1px solid #f5f5f5;
  display: flex;
  justify-content: space-between;
}

.itensList li:last-child {
  border-bottom: none;
}

/* Status */
.statusAguardando { color: #ffc107; }
.statusPendente { color: #ff9800; }
.statusConcluido { color: #4caf50; }
.statusCancelado { color: #f44336; }

/* Mensagens */
.loading, .empty {
  text-align: center;
  padding: 40px;
  font-size: 18px;
  color: #666;
}

.empty {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.empty:before {
  content: "ðŸ½ï¸";
  font-size: 50px;
  margin-bottom: 20px;
}

.error {
  color: #d32f2f;
  background: #ffebee;
  padding: 20px;
  border-radius: 5px;
  text-align: center;
  margin: 20px 0;
}

@media (max-width: 768px) {
  .historicoContainer {
    padding: 15px;
  }

  .pedidoHeader {
    flex-direction: column;
    align-items: flex-start;
  }

  .pedidoHeader span {
    margin-top: 10px;
  }

  .pedidoInfo p {
    flex-direction: column;
  }

  .pedidoInfo strong {
    min-width: auto;
    margin-bottom: 5px;
  }
}
import React, { useEffect, useState, useMemo } from 'react';
import api from '../services/api';
import styles from './HistoricoPedidos.module.css';

interface ItemPedidoDTO {
  id: number;
  nomeProduto: string;
  quantidade: number;
  precoUnitario: number | string;
}

interface HistoricoPedidoDTO {
  pedidoId: number;
  nomeRestaurante: string;
  data: string;
  status: string;
  itens: ItemPedidoDTO[];
}

const HistoricoPedidos: React.FC<{ usuarioId: number; onVoltar: () => void }> = ({
  usuarioId,
  onVoltar,
}) => {
  const [pedidos, setPedidos] = useState<HistoricoPedidoDTO[]>([]);
  const [erro, setErro] = useState<string | null>(null);
  const [carregando, setCarregando] = useState(true);

  const pedidosOrdenados = useMemo(() => {
    return [...pedidos].sort((a, b) => {
      const dateA = new Date(a.data).getTime();
      const dateB = new Date(b.data).getTime();
      return dateB - dateA || b.pedidoId - a.pedidoId;
    });
  }, [pedidos]);

  const calcularTotal = (itens: ItemPedidoDTO[]) =>
    itens.reduce((total, item) => {
      const preco = typeof item.precoUnitario === 'string'
        ? parseFloat(item.precoUnitario)
        : item.precoUnitario;
      return total + (preco || 0) * item.quantidade;
    }, 0);

  const formatarData = (data: string) => {
    const date = new Date(data);
    return isNaN(date.getTime())
      ? 'Data invÃ¡lida'
      : date.toLocaleDateString('pt-BR');
  };

  const getStatusStyle = (status: string) => {
    const statusUpper = status.toUpperCase();
    if (statusUpper.includes('AGUARDANDO')) return styles.statusAguardando;
    if (statusUpper.includes('EM_PREPARO') || statusUpper.includes('PREPARANDO')) return styles.statusPreparo;
    if (statusUpper.includes('PRONTO')) return styles.statusPronto;
    if (statusUpper.includes('ENTREGUE') || statusUpper.includes('CONCLUIDO')) return styles.statusEntregue;
    if (statusUpper.includes('CANCELADO') || statusUpper.includes('RECUSADO')) return styles.statusCancelado;
    return '';
  };

  const formatarStatus = (status: string) => {
    const statusUpper = status.toUpperCase();
    if (statusUpper.includes('AGUARDANDO')) return 'ðŸŸ¡ Aguardando';
    if (statusUpper.includes('EM_PREPARO') || statusUpper.includes('PREPARANDO')) return 'ðŸ”µ Em preparo';
    if (statusUpper.includes('PRONTO')) return 'ðŸŸ¢ Pronto';
    if (statusUpper.includes('ENTREGUE') || statusUpper.includes('CONCLUIDO')) return 'âœ… Entregue';
    if (statusUpper.includes('CANCELADO') || statusUpper.includes('RECUSADO')) return 'ðŸ”´ Cancelado';
    return status;
  };

  useEffect(() => {
    const loadPedidos = async () => {
      try {
        setCarregando(true);
        const { data } = await api.get<HistoricoPedidoDTO[]>(`/pedidos/cliente/${usuarioId}`);
        setPedidos(data);
      } catch (error) {
        console.error('Erro ao buscar pedidos:', error);
        setErro('Falha ao carregar histÃ³rico');
      } finally {
        setCarregando(false);
      }
    };
    loadPedidos();
  }, [usuarioId]);

  if (carregando) return <div className={styles.loading}>Carregando...</div>;
  if (erro) return <div className={styles.error}>{erro}</div>;
  if (!pedidos.length) return <div className={styles.empty}>Nenhum pedido encontrado</div>;

  return (
    <div className={styles.historicoContainer}>
      <div className={styles.header}>
        <button onClick={onVoltar} className={styles.btnVoltar}>â† Voltar</button>
        <h2>ðŸ“œ HistÃ³rico de Pedidos</h2>
      </div>

      <div className={styles.pedidosGrid}>
        {pedidosOrdenados.map((pedido) => (
          <div key={pedido.pedidoId} className={styles.pedidoCard}>
            <div className={styles.pedidoHeader}>
              <h3>{pedido.itens[0]?.nomeProduto || 'Pedido sem nome'}</h3>
              <span>#{pedido.pedidoId}</span>
            </div>

            <div className={styles.statusContainer}>
              <span className={`${styles.status} ${getStatusStyle(pedido.status)}`}>
                {formatarStatus(pedido.status)}
              </span>
            </div>

            <div className={styles.infoContainer}>
              <span className={styles.data}>{formatarData(pedido.data)}</span>
              <span className={styles.total}>Total: R$ {calcularTotal(pedido.itens).toFixed(2)}</span>
            </div>

            <ul className={styles.itens}>
              {pedido.itens.map((item) => {
                const preco = typeof item.precoUnitario === 'string'
                  ? parseFloat(item.precoUnitario)
                  : item.precoUnitario;
                return (
                  <li key={item.id}>
                    {item.quantidade}Ã— {item.nomeProduto} â€” R$ {preco.toFixed(2)}
                  </li>
                );
              })}
            </ul>
          </div>
        ))}
      </div>
    </div>
  );
};

export default HistoricoPedidos;
import React, { useEffect, useState } from 'react';
import api from '../services/api';

interface ItemPedidoDTO {
  id: number;
  nomeProduto: string;
  quantidade: number;
  precoUnitario: number | string;
}

interface HistoricoPedidoDTO {
  pedidoId: number;
  nomeRestaurante: string;
  data: string;
  status: string;
  itens: ItemPedidoDTO[];
}

const HistoricoUsuario: React.FC<{ usuarioId: number }> = ({ usuarioId }) => {
  const [pedidos, setPedidos] = useState<HistoricoPedidoDTO[]>([]);
  const [carregando, setCarregando] = useState(true);
  const [erro, setErro] = useState<string | null>(null);

  useEffect(() => {
    const carregarHistorico = async () => {
      try {
        setCarregando(true);
        const res = await api.get<HistoricoPedidoDTO[]>(`/pedidos/cliente/${usuarioId}`);
        setPedidos(res.data);
      } catch (error) {
        console.error('Erro ao buscar histÃ³rico:', error);
        setErro('Erro ao carregar histÃ³rico.');
      } finally {
        setCarregando(false);
      }
    };

    carregarHistorico();
  }, [usuarioId]);

  const calcularTotal = (itens: ItemPedidoDTO[]) =>
    itens.reduce((total, item) => {
      const preco = typeof item.precoUnitario === 'string' ? parseFloat(item.precoUnitario) : item.precoUnitario;
      return total + preco * item.quantidade;
    }, 0);

  const formatarData = (data: string) => {
    const date = new Date(data);
    return date.toLocaleDateString('pt-BR') + ' ' + date.toLocaleTimeString('pt-BR');
  };

  if (carregando) return <p>Carregando histÃ³rico...</p>;
  if (erro) return <p style={{ color: 'red' }}>{erro}</p>;
  if (!pedidos.length) return <p>Nenhum pedido encontrado.</p>;

  return (
    <div style={{ padding: 20 }}>
      <h2>ðŸ“œ HistÃ³rico de Pedidos do UsuÃ¡rio #{usuarioId}</h2>
      {pedidos.map((pedido) => (
        <div
          key={pedido.pedidoId}
          style={{
            border: '1px solid #ccc',
            padding: 16,
            borderRadius: 10,
            marginBottom: 16,
            backgroundColor: '#f9f9f9'
          }}
        >
          <h3>
            Pedido #{pedido.pedidoId} â€” {pedido.nomeRestaurante}
          </h3>
          <p>
            <strong>Status:</strong> {pedido.status} | <strong>Data:</strong> {formatarData(pedido.data)}
          </p>
          <ul>
            {pedido.itens.map((item) => {
              const preco =
                typeof item.precoUnitario === 'string'
                  ? parseFloat(item.precoUnitario)
                  : item.precoUnitario;
              return (
                <li key={item.id}>
                  {item.quantidade}Ã— {item.nomeProduto} â€” R$ {preco.toFixed(2)}
                </li>
              );
            })}
          </ul>
          <p>
            <strong>Total:</strong> R$ {calcularTotal(pedido.itens).toFixed(2)}
          </p>
        </div>
      ))}
    </div>
  );
};

export default HistoricoUsuario;
import React, { useEffect, useState } from 'react';
import api from '../services/api';
import CardapioRestaurante from './CardapioRestaurante';
import HistoricoPedidos from './HistoricoPedidos';
import CadastroUsuario from './CadastroUsuario';
import { useNavigate } from 'react-router-dom';

interface Restaurante {
  id: number;
  nome: string;
  endereco: string;
  telefone: string;
}

const ListaRestaurantes: React.FC = () => {
  const [restaurantes, setRestaurantes] = useState<Restaurante[]>([]);
  const [carregando, setCarregando] = useState(true);
  const [restauranteSelecionado, setRestauranteSelecionado] = useState<Restaurante | null>(null);
  const [mostrarHistorico, setMostrarHistorico] = useState(false);
  const usuarioId = 1;
  const navigate = useNavigate();

  useEffect(() => {
    api.get('/restaurantes', { params: { pagina: 0, tamanho: 10 } })
      .then((res) => setRestaurantes(res.data))
      .catch((err) => console.error('Erro ao carregar restaurantes:', err))
      .finally(() => setCarregando(false));
  }, []);

  const handleSelecionar = (restaurante: Restaurante) => setRestauranteSelecionado(restaurante);
  const handleVoltar = () => setRestauranteSelecionado(null);

  if (carregando) return <p>Carregando restaurantes...</p>;

  return (
    <div>
      <div style={{ display: 'flex', gap: '10px', marginBottom: '10px' }}>
        <button
          onClick={() => setMostrarHistorico(true)}
          style={{
            padding: '8px 16px',
            background: '#ff5e00',
            color: 'white',
            border: 'none',
            borderRadius: '20px',
            cursor: 'pointer',
            fontWeight: 'bold'
          }}
        >
          ðŸ“œ VER MEU HISTÃ“RICO
        </button>

        <button
          onClick={() => navigate('/cadastro')}
          style={{
            padding: '8px 16px',
            background: '#000',
            color: 'white',
            border: 'none',
            borderRadius: '20px',
            cursor: 'pointer',
            fontWeight: 'bold'
          }}
        >
          âž• CADASTRAR USUÃRIO
        </button>
      </div>

      {mostrarHistorico ? (
        <HistoricoPedidos
          usuarioId={usuarioId}
          onVoltar={() => setMostrarHistorico(false)}
        />
      ) : (
        !restauranteSelecionado ? (
          <ul style={{ listStyle: 'none', padding: 0 }}>
            {restaurantes.map((r) => (
              <li
                key={r.id}
                onClick={() => handleSelecionar(r)}
                style={{
                  cursor: 'pointer',
                  padding: '15px',
                  margin: '10px 0',
                  border: '1px solid #ddd',
                  borderRadius: '10px',
                  transition: 'all 0.3s',
                  backgroundColor: '#fff'
                }}
              >
                <h2 style={{ color: '#333', marginTop: 0 }}>{r.nome}</h2>
                <p style={{ color: '#666', margin: '5px 0' }}>ðŸ“ {r.endereco}</p>
                <p style={{ color: '#666', margin: '5px 0' }}>ðŸ“ž {r.telefone}</p>
              </li>
            ))}
          </ul>
        ) : (
          <CardapioRestaurante
            restauranteId={restauranteSelecionado.id}
            nomeRestaurante={restauranteSelecionado.nome}
            onVoltar={handleVoltar}
          />
        )
      )}
    </div>
  );
};

export default ListaRestaurantes;
/* Estilos Gerais */
.painel-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

.btn-voltar {
  background: #6c757d;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
  margin-bottom: 20px;
}

.btn-voltar:hover {
  background: #5a6268;
}

.painel-titulo {
  color: #343a40;
  margin-bottom: 5px;
}

.painel-subtitulo {
  color: #6c757d;
  margin-bottom: 30px;
}

/* Alertas */
.alert {
  padding: 12px;
  border-radius: 4px;
  margin-bottom: 20px;
}

.sucesso {
  background-color: #d4edda;
  color: #155724;
  border: 1px solid #c3e6cb;
}

.erro {
  background-color: #f8d7da;
  color: #721c24;
  border: 1px solid #f5c6cb;
}

/* Novo Produto */
.novo-produto-card {
  background: white;
  border-radius: 8px;
  padding: 20px;
  margin-bottom: 30px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.novo-produto-form label {
  display: block;
  margin-bottom: 8px;
  font-weight: 500;
  color: #495057;
}

.novo-produto-form input {
  width: 100%;
  padding: 10px;
  border: 1px solid #ced4da;
  border-radius: 4px;
  margin-bottom: 15px;
}

.grid-2 {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 15px;
}

.acoes {
  display: flex;
  justify-content: flex-end;
  gap: 10px;
  margin-top: 15px;
}

.btn-primario {
  background: #007bff;
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 4px;
  cursor: pointer;
}

.btn-primario:hover {
  background: #0069d9;
}

.btn-secundario {
  background: #6c757d;
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 4px;
  cursor: pointer;
}

.btn-secundario:hover {
  background: #5a6268;
}

/* Lista de Pedidos */
.pedidos-lista {
  display: grid;
  gap: 20px;
}

.pedido-card {
  background: white;
  border-radius: 8px;
  padding: 20px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.pedido-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 15px;
  padding-bottom: 15px;
  border-bottom: 1px solid #e9ecef;
}

.pedido-info {
  margin-bottom: 15px;
}

.pedido-info p {
  margin: 5px 0;
  color: #495057;
}

/* Status Badges */
.status-badge {
  padding: 5px 12px;
  border-radius: 20px;
  font-size: 0.8rem;
  font-weight: bold;
  text-transform: uppercase;
}

.status-aguardando {
  background-color: #fff3cd;
  color: #856404;
}

.status-preparo {
  background-color: #cce5ff;
  color: #004085;
}

.status-pronto {
  background-color: #d4edda;
  color: #155724;
}

.status-entregue {
  background-color: #d1ecf1;
  color: #0c5460;
}

.status-cancelado {
  background-color: #f8d7da;
  color: #721c24;
}

/* Itens do Pedido */
.itens-container {
  margin-top: 15px;
}

.itens-container h4 {
  margin-bottom: 10px;
  color: #495057;
}

.itens-lista {
  list-style: none;
  padding: 0;
  margin: 0;
}

.itens-lista li {
  display: flex;
  justify-content: space-between;
  padding: 8px 0;
  border-bottom: 1px solid #f1f1f1;
}

.item-quantidade {
  font-weight: bold;
  min-width: 30px;
}

.item-nome {
  flex-grow: 1;
  padding: 0 10px;
}

.item-preco {
  font-weight: bold;
  color: #28a745;
}

/* BotÃµes de AÃ§Ã£o */
.acoes-pedido {
  display: flex;
  gap: 10px;
  margin-top: 20px;
  flex-wrap: wrap;
}

.btn-aceitar {
  background-color: #28a745;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
  font-weight: bold;
  transition: background-color 0.3s;
}

.btn-aceitar:hover {
  background-color: #218838;
}

.btn-recusar {
  background-color: #dc3545;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
  font-weight: bold;
  transition: background-color 0.3s;
}

.btn-recusar:hover {
  background-color: #c82333;
}

.btn-entregue {
  background-color: #17a2b8;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
  font-weight: bold;
  transition: background-color 0.3s;
}

.btn-entregue:hover {
  background-color: #138496;
}

/* Loading */
.loading-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 200px;
}

.spinner {
  border: 4px solid rgba(0, 0, 0, 0.1);
  width: 36px;
  height: 36px;
  border-radius: 50%;
  border-left-color: #007bff;
  animation: spin 1s linear infinite;
  margin-bottom: 10px;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Responsividade */
@media (max-width: 768px) {
  .grid-2 {
    grid-template-columns: 1fr;
  }

  .pedido-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 10px;
  }

  .acoes-pedido button {
    width: 100%;
  }
}
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../services/api';
import './PainelRestaurante.css';

interface ItemPedido {
  id: number;
  nomeProduto: string;
  quantidade: number;
  precoUnitario: number;
}

interface Pedido {
  id: number;
  data: string;
  status: string;
  nomeCliente: string;
  telefoneCliente: string;
  itens: ItemPedido[];
  total: number;
}

interface PainelProps {
  restauranteId: number;
  onVoltar?: () => void;
}

const PainelRestaurante: React.FC<PainelProps> = ({ restauranteId, onVoltar }) => {
  const [pedidos, setPedidos] = useState<Pedido[]>([]);
  const [carregando, setCarregando] = useState(true);
  const [erro, setErro] = useState<string | null>(null);

  const [nomeProd, setNomeProd] = useState('');
  const [descProd, setDescProd] = useState('');
  const [precoProd, setPrecoProd] = useState('');
  const [salvando, setSalvando] = useState(false);
  const [msgOk, setMsgOk] = useState<string | null>(null);
  const [msgErro, setMsgErro] = useState<string | null>(null);

  const navigate = useNavigate();

  const carregarPedidos = async () => {
    try {
      const res = await api.get(`/api/restaurantes/${restauranteId}/pedidos`, {
        params: { page: 0, size: 10 },
      });
      setPedidos(res.data?.content || []);
      setErro(null);
    } catch (err: any) {
      const status = err?.response?.status;
      setErro(
        status === 404
          ? 'Restaurante nÃ£o encontrado. Verifique o ID utilizado.'
          : 'Erro ao carregar pedidos. Tente novamente.'
      );
    } finally {
      setCarregando(false);
    }
  };

  useEffect(() => {
    carregarPedidos();
  }, [restauranteId]);

  const atualizarStatus = async (pedidoId: number, novoStatus: string) => {
    try {
      await api.patch(
        `/api/restaurantes/${restauranteId}/pedidos/${pedidoId}/status`,
        null,
        { params: { status: novoStatus } }
      );
      await carregarPedidos();
    } catch {
      setErro('Erro ao atualizar status do pedido.');
    }
  };

  const getStatusClass = (status: string) => {
    const s = status?.toUpperCase?.() || '';
    if (s === 'AGUARDANDO') return 'status-aguardando';
    if (s === 'EM_PREPARO' || s === 'PREPARANDO') return 'status-preparo';
    if (s === 'PRONTO') return 'status-pronto';
    if (s === 'ENTREGUE') return 'status-entregue';
    if (s === 'CANCELADO' || s === 'RECUSADO') return 'status-cancelado';
    return '';
  };

  const criarProduto = async (e: React.FormEvent) => {
    e.preventDefault();
    setMsgOk(null);
    setMsgErro(null);

    if (!nomeProd.trim() || !descProd.trim() || !precoProd.trim()) {
      setMsgErro('Preencha nome, descriÃ§Ã£o e preÃ§o.');
      return;
    }

    const precoNumber = Number(precoProd.replace(',', '.'));
    if (Number.isNaN(precoNumber) || precoNumber < 0) {
      setMsgErro('Informe um preÃ§o vÃ¡lido (ex.: 28.90).');
      return;
    }

    setSalvando(true);
    try {
      await api.post(`/api/produtos/por-restaurante/${restauranteId}`, {
        nome: nomeProd.trim(),
        descricao: descProd.trim(),
        preco: precoNumber,
      });

      setMsgOk('âœ… Produto cadastrado com sucesso!');
      setNomeProd('');
      setDescProd('');
      setPrecoProd('');
    } catch (err: any) {
      const msg = err?.response?.data?.message || 'Erro ao cadastrar produto.';
      setMsgErro(`âŒ ${msg}`);
    } finally {
      setSalvando(false);
      setTimeout(() => {
        setMsgErro(null);
        setMsgOk(null);
      }, 4000);
    }
  };

  if (carregando) {
    return (
      <div className="loading-container">
        <div className="spinner" />
        <p>Carregando pedidos...</p>
      </div>
    );
  }

  return (
    <div className="painel-container">
      <button onClick={() => (onVoltar ? onVoltar() : navigate(-1))} className="btn-voltar">
        &larr; Voltar
      </button>

      <h1 className="painel-titulo">Painel de Pedidos</h1>
      <p className="painel-subtitulo">Usando ID: {restauranteId}</p>

      {msgOk && <div className="alert sucesso">{msgOk}</div>}
      {msgErro && <div className="alert erro">{msgErro}</div>}
      {erro && <div className="alert erro">{erro}</div>}

      {/* Novo Produto */}
      <div className="novo-produto-card">
        <h2>Novo produto</h2>
        <form onSubmit={criarProduto} className="novo-produto-form">
          <div>
            <label>Nome</label>
            <input value={nomeProd} onChange={(e) => setNomeProd(e.target.value)} required />
          </div>
          <div className="grid-2">
            <div>
              <label>DescriÃ§Ã£o</label>
              <input value={descProd} onChange={(e) => setDescProd(e.target.value)} required />
            </div>
            <div>
              <label>PreÃ§o (R$)</label>
              <input
                type="number"
                inputMode="decimal"
                min="0"
                step="0.01"
                value={precoProd}
                onChange={(e) => setPrecoProd(e.target.value)}
                required
              />
            </div>
          </div>
          <div className="acoes">
            <button
              type="button"
              className="btn-secundario"
              onClick={() => {
                setNomeProd('');
                setDescProd('');
                setPrecoProd('');
                setMsgErro(null);
                setMsgOk(null);
              }}
              disabled={salvando}
            >
              Cancelar
            </button>
            <button type="submit" className="btn-primario" disabled={salvando}>
              {salvando ? 'Salvando...' : 'Cadastrar'}
            </button>
          </div>
        </form>
      </div>

      {/* Lista de Pedidos */}
      <div className="pedidos-lista">
        {pedidos.length === 0 ? (
          <div className="sem-pedidos"><p>Nenhum pedido encontrado.</p></div>
        ) : (
          pedidos.map((pedido) => (
            <div key={pedido.id} className="pedido-card">
              <div className="pedido-header">
                <h3>Pedido #{pedido.id}</h3>
                <span className={`status-badge ${getStatusClass(pedido.status)}`}>
                  {pedido.status}
                </span>
              </div>
              <div className="pedido-info">
                <p><strong>Data:</strong> {new Date(pedido.data).toLocaleString()}</p>
                <p><strong>Cliente:</strong> {pedido.nomeCliente}</p>
                <p><strong>Telefone:</strong> {pedido.telefoneCliente}</p>
                <p><strong>Total:</strong> R$ {pedido.total.toFixed(2)}</p>
              </div>
              <div className="itens-container">
                <h4>Itens:</h4>
                <ul className="itens-lista">
                  {pedido.itens.map((item) => (
                    <li key={item.id}>
                      <span className="item-quantidade">{item.quantidade}x</span>
                      <span className="item-nome">{item.nomeProduto}</span>
                      <span className="item-preco">
                        R$ {(item.quantidade * item.precoUnitario).toFixed(2)}
                      </span>
                    </li>
                  ))}
                </ul>
              </div>
              <div className="acoes-pedido">
                {pedido.status.toUpperCase() === 'AGUARDANDO' && (
                  <>
                    <button onClick={() => atualizarStatus(pedido.id, 'EM_PREPARO')} className="btn-aceitar">
                      Aceitar Pedido
                    </button>
                    <button onClick={() => atualizarStatus(pedido.id, 'CANCELADO')} className="btn-recusar">
                      Recusar Pedido
                    </button>
                  </>
                )}
                {(pedido.status.toUpperCase() === 'EM_PREPARO' || pedido.status.toUpperCase() === 'PRONTO') && (
                  <button onClick={() => atualizarStatus(pedido.id, 'ENTREGUE')} className="btn-entregue">
                    Marcar como Entregue
                  </button>
                )}
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  );
};

export default PainelRestaurante;
.login-container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background-color: #f5f5f5;
  padding: 20px;
}

.login-card {
  background: white;
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  padding: 30px;
  width: 100%;
  max-width: 400px;
}

.login-card h2 {
  margin-top: 0;
  color: #333;
  text-align: center;
}

.subtitle {
  text-align: center;
  color: #666;
  margin-bottom: 25px;
}

.login-form {
  display: grid;
  gap: 20px;
}

.form-group {
  display: grid;
  gap: 8px;
}

.form-group label {
  font-weight: 500;
  color: #555;
}

.form-group input {
  padding: 12px;
  border: 1px solid #ddd;
  border-radius: 8px;
  font-size: 16px;
  transition: border 0.3s;
}

.form-group input:focus {
  border-color: #007bff;
  outline: none;
}

.login-button {
  background-color: #28a745;
  color: white;
  border: none;
  padding: 12px;
  border-radius: 8px;
  font-size: 16px;
  font-weight: 500;
  cursor: pointer;
  transition: background-color 0.3s;
}

.login-button:hover {
  background-color: #218838;
}

.login-button:disabled {
  background-color: #6c757d;
  cursor: not-allowed;
}

.links {
  display: flex;
  justify-content: space-between;
  margin-top: 20px;
  font-size: 14px;
}

.links a {
  color: #007bff;
  text-decoration: none;
}

.links a:hover {
  text-decoration: underline;
}

.alert {
  padding: 12px;
  border-radius: 8px;
  margin-bottom: 20px;
  text-align: center;
}

.erro {
  background-color: #f8d7da;
  color: #721c24;
}
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../services/api';
import './UsuarioLogin.css'; // Estilo especÃ­fico (opcional)

const UsuarioLogin: React.FC = () => {
  const navigate = useNavigate();
  const [email, setEmail] = useState('');
  const [senha, setSenha] = useState('');
  const [loading, setLoading] = useState(false);
  const [erro, setErro] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setErro(null);
    setLoading(true);

    try {
      // 1) Login do usuÃ¡rio (endpoint diferente do dono)
      const response = await api.post('/api/auth/usuarios/login', { email, senha });

      // 2) Extrair ID do usuÃ¡rio da resposta
      const usuarioId = response.data?.id;
      if (!usuarioId) {
        throw new Error('ID do usuÃ¡rio nÃ£o encontrado na resposta');
      }

      // âœ… Salva o ID no localStorage
      localStorage.setItem("usuarioId", usuarioId.toString());

      // 3) Redirecionar para dashboard ou lista de restaurantes
      navigate('/dashboard'); // Ou `/usuario/${usuarioId}` se tiver perfil

    } catch (err: any) {
      console.error('Erro no login:', err);
      setErro(
        err.response?.data?.message ||
        'Falha no login. Verifique seu e-mail e senha.'
      );
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="login-container">
      <div className="login-card">
        <h2>ðŸ” Login do Cliente</h2>
        <p className="subtitle">Acesse para fazer pedidos</p>

        {erro && (
          <div className="alert erro">
            {erro}
          </div>
        )}

        <form onSubmit={handleSubmit} className="login-form">
          <div className="form-group">
            <label>E-mail</label>
            <input
              type="email"
              required
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder="cliente@exemplo.com"
            />
          </div>

          <div className="form-group">
            <label>Senha</label>
            <input
              type="password"
              required
              value={senha}
              onChange={(e) => setSenha(e.target.value)}
              placeholder="â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢"
            />
          </div>

          <button type="submit" disabled={loading} className="login-button">
            {loading ? 'Entrando...' : 'Entrar'}
          </button>
        </form>

        <div className="links">
          <a href="/cadastro">NÃ£o tem conta? Cadastre-se</a>
          <a href="/recuperar-senha">Esqueceu a senha?</a>
        </div>
      </div>
    </div>
  );
};

export default UsuarioLogin;
export interface Restaurante {
  id: number;
  nome: string;
  endereco: string;
  telefone: string;
}
/* src/pages/App.css */
.navbar {
  background-color: #f8f9fa;
  padding: 15px;
  margin-bottom: 20px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.nav-link {
  margin-right: 15px;
  text-decoration: none;
  color: #333;
  font-weight: 500;
  padding: 8px 12px;
  border-radius: 4px;
  transition: all 0.3s ease;
}

.nav-link:hover {
  background-color: #e9ecef;
  color: #0056b3;
}

.nav-link.active {
  background-color: #007bff;
  color: white;
}
import React, { useState } from 'react';
import { BrowserRouter as Router, Route, Routes, Link, useParams } from 'react-router-dom';
import ListaRestaurantes from '../components/ListaRestaurantes';
import Dashboard from '../components/Dashboard';
import CadastroUsuario from '../components/CadastroUsuario';
import PainelRestaurante from '../components/PainelRestaurante';
import DonoLogin from '../components/DonoLogin';
import CadastroDono from '../components/CadastroDono';
import CardapioRestaurante from '../components/CardapioRestaurante';
import UsuarioLogin from '../components/UsuarioLogin';
import HistoricoUsuario from '../components/HistoricoUsuario'; // âœ… NOVO COMPONENTE
import './App.css';

const PainelWrapper: React.FC = () => {
  const { restauranteId } = useParams<{ restauranteId: string }>();
  const id = Number(restauranteId);
  return <PainelRestaurante restauranteId={id} onVoltar={() => window.history.back()} />;
};

const CardapioWrapper: React.FC = () => {
  const { restauranteId } = useParams<{ restauranteId: string }>();
  const id = Number(restauranteId ?? 1);
  return (
    <CardapioRestaurante
      restauranteId={id}
      nomeRestaurante={`Restaurante #${id}`}
      onVoltar={() => window.history.back()}
    />
  );
};

const HistoricoWrapper: React.FC = () => {
  const usuarioId = parseInt(localStorage.getItem('usuarioId') || '1'); // âœ… pega o ID logado
  return <HistoricoUsuario usuarioId={usuarioId} />;
};

const App: React.FC = () => {
  const [mostrarCadastro, setMostrarCadastro] = useState(false);
  const handleVoltar = () => setMostrarCadastro(false);

  return (
    <Router>
      <nav className="navbar">
        <Link to="/" className="nav-link">Home</Link>
        <Link to="/dashboard" className="nav-link">Dashboard</Link>
        <Link to="/cadastro" className="nav-link">Cadastro</Link>
        <Link to="/cadastro-dono" className="nav-link">Cadastro Dono</Link>
        <Link to="/painel-restaurante" className="nav-link">Painel (teste ID fixo)</Link>
        <Link to="/login-dono" className="nav-link">Login Dono</Link>
        <Link to="/login" className="nav-link">Login Cliente</Link>
        <Link to="/cardapio/1" className="nav-link">CardÃ¡pio (rest. 1)</Link>
        <Link to="/historico-usuario" className="nav-link">ðŸ“œ Meu HistÃ³rico</Link> {/* âœ… NOVO LINK */}
      </nav>

      <Routes>
        <Route path="/" element={<ListaRestaurantes />} />
        <Route path="/dashboard" element={<Dashboard />} />
        <Route path="/cadastro" element={<CadastroUsuario onVoltar={handleVoltar} />} />
        <Route path="/cadastro-dono" element={<CadastroDono />} />
        <Route path="/painel-restaurante" element={<PainelRestaurante restauranteId={4} onVoltar={handleVoltar} />} />
        <Route path="/painel-restaurante/:restauranteId" element={<PainelWrapper />} />
        <Route path="/login-dono" element={<DonoLogin />} />
        <Route path="/login" element={<UsuarioLogin />} />
        <Route path="/cardapio/:restauranteId" element={<CardapioWrapper />} />
        <Route path="/historico-usuario" element={<HistoricoWrapper />} /> {/* âœ… NOVA ROTA */}
      </Routes>
    </Router>
  );
};

export default App;
import axios, { AxiosError } from 'axios';

const api = axios.create({
  baseURL: 'http://localhost:8086',
  timeout: 5000,
  headers: {
    'Content-Type': 'application/json',
  },
});

api.interceptors.response.use(
  (response) => response,
  (error: AxiosError) => {
    console.error('Erro na requisiÃ§Ã£o:', {
      url: error.config?.url,
      status: error.response?.status,
      data: error.response?.data,
    });
    return Promise.reject(error);
  }
);

export const atualizarStatusPedido = async (
  restauranteId: number,
  pedidoId: number,
  status: 'EM_PREPARO' | 'CANCELADO'
) => {
  try {
    const response = await api.patch(
      `/pedidos/restaurante/${restauranteId}/${pedidoId}/status?status=${status}`
    );
    return response.data;
  } catch (error) {
    console.error('Falha ao atualizar status:', error);
    throw error;
  }
};

export default api;
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
import React from 'react';
import { createRoot } from 'react-dom/client';
import './index.css';
import App from './pages/App';

const container = document.getElementById('root');
const root = createRoot(container!);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// Removi o reportWebVitals jÃ¡ que nÃ£o estÃ¡ sendo usado
/// <reference types="react-scripts" />
import { ReportHandler } from 'web-vitals';

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;
